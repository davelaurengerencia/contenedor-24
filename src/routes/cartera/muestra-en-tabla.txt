<script>
    import _ from 'lodash'; // Importar lodash
  
    let file;
    let data = [];
    let dataToFilter = [];
    let filteredData = [];
    let monthlyTotals = [];
    let grandTotal = 0;
    let grandTotalPorVen = 0;
    let grandTotalVen30 = 0;
    let grandTotalVen60 = 0;
    let grandTotalVen90 = 0;
    let grandTotalVen120 = 0;
    let grandTotalMas120 = 0;
    let selectedTer = "";
    let searchText = "";
    let searchResults = [];
    let buttonText = 'Cargar Datos'; // Variable para el texto del botón
    let filterButtonText = 'Filtrar y Calcular'; // Variable para el texto del botón de filtro
    let options = []; // Opciones para el dropdown
    let webhookResponse = ""; // Variable para almacenar la respuesta del webhook
  
    function handleFileUpload(event) {
      file = event.target.files[0];
      if (file) {
        processFile(file);
      }
    }
  
    function processFile(file) {
      const reader = new FileReader();
      reader.onload = (event) => {
        const text = event.target.result;
        analyzeCSV(text);
      };
      reader.readAsText(file);
    }
  
    function analyzeCSV(csvText) {
      const rows = csvText.split('\n').map(row => row.split(','));
      if (rows.length > 0) {
        const header = rows[0];
  
        data = rows.slice(1).map(row => {
          let obj = {};
          header.forEach((key, index) => {
            obj[key] = row[index];
          });
          return obj;
        });
  
        dataToFilter = [...data]; // Inicializar dataToFilter con una copia de los datos originales
  
        // Obtener opciones únicas y ordenarlas
        const uniqueOptions = _.uniqBy(data, 'codigo_ter').map(row => ({
          codigo_ter: row.codigo_ter,
          nombre_ter: row.nombre_ter
        }));
        options = _.orderBy(uniqueOptions, ['nombre_ter'], ['asc']);
      }
    }
  
    function filterData() {
      if (selectedTer) {
        // Restablecer variables de resultado
        filteredData = [];
        monthlyTotals = [];
        grandTotal = 0;
        grandTotalPorVen = 0;
        grandTotalVen30 = 0;
        grandTotalVen60 = 0;
        grandTotalVen90 = 0;
        grandTotalVen120 = 0;
        grandTotalMas120 = 0;
  
        // Filtrar por codigo_ter seleccionado
        filteredData = _.filter(dataToFilter, ['codigo_ter', selectedTer]);
        
        // Convertir y limpiar saldo y otros valores, asegurándose de que sean cadenas antes de reemplazar
        filteredData = filteredData.map(row => {
          row.saldo = parseFloat(String(row.saldo).replace(/[^\d.-]/g, ''));
          row.por_ven = parseFloat(String(row.por_ven).replace(/[^\d.-]/g, ''));
          row.ven30 = parseFloat(String(row.ven30).replace(/[^\d.-]/g, ''));
          row.ven60 = parseFloat(String(row.ven60).replace(/[^\d.-]/g, ''));
          row.ven90 = parseFloat(String(row.ven90).replace(/[^\d.-]/g, ''));
          row.ven120 = parseFloat(String(row.ven120).replace(/[^\d.-]/g, ''));
          row.mas120 = parseFloat(String(row.mas120).replace(/[^\d.-]/g, ''));
          return row;
        });
  
        // Calcular Gran Total y otros totales
        grandTotal = _.sumBy(filteredData, 'saldo');
        grandTotalPorVen = _.sumBy(filteredData, 'por_ven');
        grandTotalVen30 = _.sumBy(filteredData, 'ven30');
        grandTotalVen60 = _.sumBy(filteredData, 'ven60');
        grandTotalVen90 = _.sumBy(filteredData, 'ven90');
        grandTotalVen120 = _.sumBy(filteredData, 'ven120');
        grandTotalMas120 = _.sumBy(filteredData, 'mas120');
  
        // Agrupar por mes y año
        const groupedData = _.groupBy(filteredData, row => row.fecha.slice(0, 7)); // Agrupar por año y mes (YYYY-MM)
        monthlyTotals = _.map(groupedData, (rows, month) => {
          const totalSaldo = _.sumBy(rows, 'saldo');
          const totalPorVen = _.sumBy(rows, 'por_ven');
          const totalVen30 = _.sumBy(rows, 'ven30');
          const totalVen60 = _.sumBy(rows, 'ven60');
          const totalVen90 = _.sumBy(rows, 'ven90');
          const totalVen120 = _.sumBy(rows, 'ven120');
          const totalMas120 = _.sumBy(rows, 'mas120');
          return { month, totalSaldo, totalPorVen, totalVen30, totalVen60, totalVen90, totalVen120, totalMas120 };
        });
  
        // Ordenar por mes y año
        monthlyTotals = _.orderBy(monthlyTotals, ['month'], ['asc']);
      }
    }
  
    $: if (selectedTer) {
      dataToFilter = [...data]; // Reasignar dataToFilter con una copia de los datos originales cada vez que se cambie el selector
    }
  
    $: searchText, searchResults = options.filter(option => option.nombre_ter.toLowerCase().includes(searchText.toLowerCase()));
  
    function formatMonthYear(month) {
      const [year, monthIndex] = month.split('-');
      const date = new Date(year, monthIndex - 1);
      return date.toLocaleString('es-ES', { year: 'numeric', month: 'long' });
    }
  
    function formatCurrency(value) {
      return value.toLocaleString('es-CO', { style: 'currency', currency: 'COP' });
    }
  
    function selectResult(codigo_ter) {
      selectedTer = codigo_ter;
      searchText = ""; // Clear search text
      searchResults = []; // Clear search results
    }

    async function analyzeWithChatGPT() {
      const response = await fetch('https://hook.us1.make.com/g3wbewjo5326qvbbghqfdlz0tnzc1efh', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ data: data })
      });

      if (response.ok) {
        const responseData = await response.json();
        webhookResponse = JSON.stringify(responseData, null, 2);
      } else {
        webhookResponse = 'Error al enviar los datos';
      }
    }
  </script>

  
  <div class="container mt-4">
    <input type="file" accept=".csv" on:change="{handleFileUpload}" id="fileInput" class="form-control d-none" />
    <label for="fileInput" class="btn btn-primary mb-3 w-100">{buttonText}</label>
  
    <input type="text" bind:value="{searchText}" class="form-control mb-3" placeholder="Buscar por nombre" />
    {#if searchText && searchResults.length > 0}
      <ul class="list-group mb-3">
        {#each searchResults as { codigo_ter, nombre_ter }}
          <li class="list-group-item list-group-item-action" on:click="{() => selectResult(codigo_ter)}">{nombre_ter}</li>
        {/each}
      </ul>
    {/if}
  
    {#if options.length > 0}
      <select bind:value="{selectedTer}" class="form-select mb-3">
        <option value="">Seleccione un nombre</option>
        {#each options as { codigo_ter, nombre_ter }}
          <option value="{codigo_ter}">{nombre_ter}</option>
        {/each}
      </select>
    {/if}
  
    {#if data.length > 0 && selectedTer}
      <button on:click="{filterData}" class="btn btn-success mb-3 w-100">{filterButtonText}</button>
      <button on:click="{analyzeWithChatGPT}" class="btn btn-outline-primary w-100">ANALIZAR CON CHAT GPT</button>
    {/if}
  
    {#if grandTotal !== 0 || monthlyTotals.length > 0}
      <div class="card mb-3">
        <div class="card-body">
          <h5 class="card-title">Gran Total</h5>
          <ul class="list-group">
            <li class="list-group-item">Saldo: {formatCurrency(grandTotal)}</li>
            <li class="list-group-item">Por Ven: {formatCurrency(grandTotalPorVen)}</li>
            <li class="list-group-item">Ven 30: {formatCurrency(grandTotalVen30)}</li>
            <li class="list-group-item">Ven 60: {formatCurrency(grandTotalVen60)}</li>
            <li class="list-group-item">Ven 90: {formatCurrency(grandTotalVen90)}</li>
            <li class="list-group-item">Ven 120: {formatCurrency(grandTotalVen120)}</li>
            <li class="list-group-item">Más 120: {formatCurrency(grandTotalMas120)}</li>
          </ul>
        </div>
      </div>
  
      <div class="table-container">
        <table class="table table-striped">
          <thead>
            <tr>
              <th style="width: 150px;">Mes y Año</th>
              <th style="width: 150px;">Total Saldo</th>
              <th style="width: 150px;">Total Por Ven</th>
              <th style="width: 150px;">Total Ven 30</th>
              <th style="width: 150px;">Total Ven 60</th>
              <th style="width: 150px;">Total Ven 90</th>
              <th style="width: 150px;">Total Ven 120</th>
              <th style="width: 150px;">Total Más 120</th>
            </tr>
          </thead>
          <tbody>
            {#each monthlyTotals as { month, totalSaldo, totalPorVen, totalVen30, totalVen60, totalVen90, totalVen120, totalMas120 }}
              <tr>
                <td>{formatMonthYear(month)}</td>
                <td>{formatCurrency(totalSaldo)}</td>
                <td>{formatCurrency(totalPorVen)}</td>
                <td>{formatCurrency(totalVen30)}</td>
                <td>{formatCurrency(totalVen60)}</td>
                <td>{formatCurrency(totalVen90)}</td>
                <td>{formatCurrency(totalVen120)}</td>
                <td>{formatCurrency(totalMas120)}</td>
              </tr>
            {/each}
          </tbody>
        </table>
      </div>
    {/if}

    {#if webhookResponse}
      <div class="card mt-3">
        <div class="card-body">
          <h5 class="card-title">Respuesta del Webhook</h5>
          <pre>{webhookResponse}</pre>
        </div>
      </div>
    {/if}
  </div>
  
  <style>
    .table-container {
      overflow-x: auto;
    }
  
    .table th, .table td {
      white-space: nowrap;
    }
  
    .list-group-item {
      cursor: pointer;
    }

    pre {
      white-space: pre-wrap; /* Permite que el texto de pre se ajuste al ancho del contenedor */
      word-wrap: break-word; /* Permite que las palabras largas se ajusten al ancho del contenedor */
    }
  </style>
